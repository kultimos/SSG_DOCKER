1.新建6台redis容器
    # 启动第1台节点
    # --net host 使用宿主机的IP和端口，默认
    # --cluster-enabled yes 开启redis集群
    # --appendonly yes 开启redis持久化
    # --port 6381 配置redis端口号
    docker run -d --name redis-node-1 --net host --privileged=true -v /app/redis-cluster/share/redis-node-1:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6381

    # 启动第2台节点
    docker run -d --name redis-node-2 --net host --privileged=true -v /app/redis-cluster/share/redis-node-2:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6382

    # 启动第3台节点
    docker run -d --name redis-node-3 --net host --privileged=true -v /app/redis-cluster/share/redis-node-3:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6383

    # 启动第4台节点
    docker run -d --name redis-node-4 --net host --privileged=true -v /app/redis-cluster/share/redis-node-4:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6384

    # 启动第5台节点
    docker run -d --name redis-node-5 --net host --privileged=true -v /app/redis-cluster/share/redis-node-5:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6385

    # 启动第6台节点
    docker run -d --name redis-node-6 --net host --privileged=true -v /app/redis-cluster/share/redis-node-6:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6386

2.进入任意节点
    docker exec -it redis-node-1 /bin/bash

3.构建主从关系
    # 宿主机IP:端口
    redis-cli --cluster create 192.168.10.131:6381 192.168.10.131:6382 192.168.10.131:6383 192.168.10.131:6384 192.168.10.131:6385 192.168.10.131:6386 --cluster-replicas 1
    上面的命令表示：将6台机器构建为一个集群

4.因为我们的docker容器IP相同，所以会出现警告，可以直接忽略该警告
    [WARNING] Some slaves are in the same host as their master

5.redis自动分配结果完成后，需要输入 Yes 确认配置信息：
    M: f451eb48bbc0a7c31c7da022ffe80cc1696e0f37 192.168.xxx.xxx:6381
       slots:[0-5460] (5461 slots) master
    M: 05984211b8c38222a73abeff1d4e459c0fe1efbc 192.168.xxx.xxx:6382
       slots:[5461-10922] (5462 slots) master
    M: 1fc935c12b1d34a7df50aed643c195eb29bb3435 192.168.xxx.xxx:6383
       slots:[10923-16383] (5461 slots) master
    S: f8d0de47114bf33438747acd713cce4e412ae721 192.168.xxx.xxx:6384
       replicates 1fc935c12b1d34a7df50aed643c195eb29bb3435
    S: de0b393c17e452d856f6de2b348e9ca4e5aa4002 192.168.xxx.xxx:6385
       replicates f451eb48bbc0a7c31c7da022ffe80cc1696e0f37
    S: 0c0767e13a09ee48541738d4163592cd9842c143 192.168.xxx.xxx:6386
       replicates 05984211b8c38222a73abeff1d4e459c0fe1efbc
    Can I set the above configuration? (type 'yes' to accept):

6.输入Yes确认后，redis会向其他节点发送信息加入集群，并分配哈希槽：
    >>> Nodes configuration updated
    >>> Assign a different config epoch to each node
    >>> Sending CLUSTER MEET messages to join the cluster
    Waiting for the cluster to join
    .....
    >>> Performing Cluster Check (using node 192.168.xxx.xxx:6381)
    M: f451eb48bbc0a7c31c7da022ffe80cc1696e0f37 192.168.xxx.xxx:6381
       slots:[0-5460] (5461 slots) master
       1 additional replica(s)
    M: 1fc935c12b1d34a7df50aed643c195eb29bb3435 192.168.xxx.xxx:6383
       slots:[10923-16383] (5461 slots) master
       1 additional replica(s)
    M: 05984211b8c38222a73abeff1d4e459c0fe1efbc 192.168.xxx.xxx:6382
       slots:[5461-10922] (5462 slots) master
       1 additional replica(s)
    S: 0c0767e13a09ee48541738d4163592cd9842c143 192.168.xxx.xxx:6386
       slots: (0 slots) slave
       replicates 05984211b8c38222a73abeff1d4e459c0fe1efbc
    S: f8d0de47114bf33438747acd713cce4e412ae721 192.168.xxx.xxx:6384
       slots: (0 slots) slave
       replicates 1fc935c12b1d34a7df50aed643c195eb29bb3435
    S: de0b393c17e452d856f6de2b348e9ca4e5aa4002 192.168.xxx.xxx:6385
       slots: (0 slots) slave
       replicates f451eb48bbc0a7c31c7da022ffe80cc1696e0f37
    [OK] All nodes agree about slots configuration.
    >>> Check for open slots...
    >>> Check slots coverage...
    [OK] All 16384 slots covered.

--- 至此 说明默认分配主从节点的三主三从集群搭建完成了
现在我们可以查看集群状态
7.进入一台服务器的redis操作命令行
    redis-cli -p 6381

8.查看集群信息
    cluster info    查看集群信息
    cluster nodes   查看到整个集群中的节点信息

9.进入某一台机器存数据(这里必须加上-c表示连接的是一个集群,如果不加可能出现读写错误,这个错误原因是插槽导致的,因为我们配置了集群以后会将插槽分配给各个节点,那当前我们是三主三从,所以插槽会被等分为三份,那么现在我们如果插入一条数据,经过hash和
取模后,他会分配到哪个插槽?这我们是无法确定的,也就是说,这个数据可能存储在6381也可能存储在6382亦或是6383,那么如果我们不加-c表示集群模式,我们在6381这台机器如何能取到6383中的key呢?这就是-c的重要性,也是引入插槽以后数据存储相较于单机时的变化,
即使你在6381进行set key 也无法保证这个key一定就在6381上存着)
    redis-cli -p 6381 -c
    set sex 'wenqi'

10.换一台机器进入
    redis-cli -p 6386 -c
    get sex

注意：我们这里做的redis三主三从指的是,当一台主机宕机,从机可以迅速成为主机来保证服务可用,我们并没有做类似mysql的主从数据同步,所以在任何一台从机查询数据都会遵循一个原因,若数据真的存在于本台服务器则查出,否则跳到指定服务器,然后查出
    如下一开始我们在6386查sex的value,因为这个sex最初是存在6381这台机器下,所以就跳转到了6381机器下将数据查出
    127.0.0.1:6386> get sex
    -> Redirected to slot [2584] located at 192.168.10.130:6381
    "wenqi"
    192.168.10.130:6381>
    --- 至此 说明我们在集群下存取数据也是ok的

11.集群信息检查
    docker exec -it redis-node-1 /bin/bash  进入一台容器
    # 输入任意一台主节点地址都可以进行集群信息检查
        redis-cli --cluster check 192.168.10.131:6387

12.进入docker集群容错的测试————关闭一台master,看从机能否顶上
    docker stop redis-node-1
    redis-cli -p 6381 -c    进入一个节点的redis操作行
    cluster nodes   查看集群节点信息
    就会发现此刻原来归属于redis-node-1的node-4节点已经成为了新的master

13.此时我们重启node-1节点
    docker start redis-node-1
    redis-cli -p 6381 -c    进入一个节点的redis操作行
    cluster nodes   查看集群节点信息
    就会发现此时redis-node-4仍然是一个master节点,而我们新启动的redis-node-1变成了redis-node-4的从节点

14.复原集群状态,恢复redis-node-1为master,redis-node-4位slave

注意:
    当前我们在启动redis容器的时候开启了持久化,所以如果持久化文件没有删除干净的话,即使删除原有容器也无法达到焕然一新的效果,像image14里的这些文件,其中dump.rdb和
appendOnly.aof都是持久化产生的,而nodes.conf中记录了我们的集群节点信息(包括节点ip,主节点还是从节点);如果我们删除节点后,重新创建容器,不删除这三个文件是无法正常
运行的;