1.新建主服务器容器实例3307
    docker run -p 3307:3306 --name mysql-master
    -v /mydata/mysql-master/log:/var/log/mysql
    -v /mydata/mysql-master/data:/var/lib/mysql
    -v /mydata/mysql-master/conf:/etc/mysql
    -e MYSQL_ROOT_PASSWORD=123456
    -d mysql:5.7
    命令中的3307和3306分别代表宿主机对外提供服务的端口号和实际在docker上运行的服务的端口号，通常我们处理这种映射端口是会选择内外保持一致的;

2.进入宿主机 /mydata/mysql-master/conf 目录下新建my.cnf,并填充以下配置内容
    [mysqld]
    ## 设置server_id, 同一个局域网中需要唯一
    server_id=101
    ## 指定不需要同步的数据库名称
    binlog-ignore-db=mysql
    ## 开启二进制日志功能
    log-bin=mall-mysql-bin
    ## 设置二进制日志使用内存大小（事务）
    binlog_cache_size=1M
    ## 设置使用的二进制日志格式（mixed,statement,row）
    binlog_format=mixed
    ## 二进制日志过期清理时间。默认值为0，表示不自动清理
    expire_logs_days=7
    ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断
    ## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
    slave_skip_errors=1062

3.修改完配置后重启master实例
    docker restart mysql-master

4.进入master实例尝试登录mysql
    docker exec -it <容器实例ID> /bin/bash
    mysql -uroot -p
    提示输入密码  : 123456

5.进入数据库后,创建数据同步用户   注意:这里创建的是一个跟root类似的用户角色,而非数据库的数据,因为我们即使要进行主从同步也不能随便一个用户来了就可以进行,需要我们自己创建一个用户,并且给予相应的权限
    -- 创建数据同步用户
    create user 'slave'@'%' identified by '123456';
    -- 授权
    grant replication slave, replication client on *.* to 'slave'@'%';
    flush privileges;

6.新建从服务器容器实例3308
    docker run -p 3308:3306 --name mysql-slave -v /mydata/mysql-slave/log:/var/log/mysql -v /mydata/mysql-slave/data:/var/lib/mysql -v /mydata/mysql-slave/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7

7.进入宿主机 /mydata/mysql-master/conf 目录下新建my.cnf,并填充以下配置内容
    [mysqld]
    ## 设置server_id, 同一个局域网内需要唯一
    server_id=102
    ## 指定不需要同步的数据库名称
    binlog-ignore-db=mysql
    ## 开启二进制日志功能，以备slave作为其它数据库实例的Master时使用
    log-bin=mall-mysql-slave1-bin
    ## 设置二进制日志使用内存大小（事务）
    binlog_cache_size=1M
    ## 设置使用的二进制日志格式（mixed,statement,row）
    binlog_format=mixed
    ## 二进制日志过期清理时间。默认值为0，表示不自动清理
    expire_logs_days=7
    ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断
    ## 如：1062错误是指一些主键重复，1032是因为主从数据库数据不一致
    slave_skip_errors=1062
    ## relay_log配置中继日志
    relay_log=mall-mysql-relay-bin
    ## log_slave_updates表示slave将复制事件写进自己的二进制日志
    log_slave_updates=1
    ## slave设置只读（具有super权限的用户除外）
    read_only=1

8.修改完配置后重启slave实例
    docker restart mysql-slave

9.在主数据库中查看主从同步状态
    show master status;
    +------------------+---------------+--------------+------------------+-------------------+
    | File                  | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
    +------------------+---------------+--------------+------------------+-------------------+
    | mall-mysql-bin.000001 |      769 |              | mysql            |                   |
    +------------------+----------+--------------+------------------+------------------------+
    1 row in set (0.00 sec)

10.进入mysql-slave容器
    docker exec -it <容器实例ID> /bin/bash
    mysql -uroot -p
    提示输入密码  : 123456

11.在从数据库中配置主从复制
    master_host: 主数据库的IP地址  master_user和master_password是我们刚才配置的主从同步用户的账号和密码 master_log_file和master_log_pos应该与主数据库中show master status 查看到的结果一致
    master_log_file:指定从数据库要复制的日志文件  master_log_pos:指定从数据库要复制的日志文件的位置
    change master to master_host='192.168.10.130',master_user='slave',master_password='123456',master_port=3307,master_log_file='mall-mysql-bin.000001',master_log_pos=769,master_connect_retry=30;

12.在从数据中查看主从同步状态
    show slave status\G;
    观察
    Slave_IO_Running: No
    Slave_SQL_Running: No
    当前状态为No,表示主从同步还未开启,我们需要手动开启

13.在从数据库中开启主从同步
    start slave;


14.查看从从数据库状态发现已经开启同步成功
    show slave status\G;
    观察
    Slave_IO_Running: Yes
    Slave_SQL_Running: Yes
    当前状态为Yes,表示主从同步已经开启

15.主从复制测试



